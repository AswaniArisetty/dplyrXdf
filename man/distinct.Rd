% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distinct.R, R/zzz_non_xdf_srcs.R
\name{distinct.RxFileData}
\alias{distinct.RxFileData}
\alias{distinct}
\alias{distinct_}
\alias{distinct.grouped_tbl_xdf}
\alias{distinct.RxDataSource}
\title{Select distinct/unique rows}
\usage{
\method{distinct}{RxFileData}(.data, ..., .keep_all = FALSE,
  .outFile = tbl_xdf(.data), .rxArgs)

\method{distinct}{grouped_tbl_xdf}(.data, ..., .keep_all = FALSE,
  .outFile = tbl_xdf(.data), .rxArgs)

\method{distinct}{RxDataSource}(.data, ...)
}
\arguments{
\item{.data}{A tbl for an Xdf data source; or a raw Xdf data source.}

\item{...}{Variables to use for determining uniqueness. If left blank, all variables in \code{.data} are used to determine uniqueness.}

\item{.keep_all}{Whether to keep all the variables in the dataset, or only those used in determining uniqueness.}

\item{.outFile}{Output format for the returned data. If not supplied, create an xdf tbl; if \code{NULL}, return a data frame; if a character string naming a file, save an Xdf file at that location.}

\item{.rxArgs}{A list of RevoScaleR arguments. See \code{\link{rxArgs}} for details.}

\item{.keep_all}{If \code{TRUE}, keep all variables in the dataset; otherwise, only keep variables used in defining uniqueness.}
}
\value{
An object representing the unique rows. This depends on the \code{.outFile} argument: if missing, it will be an xdf tbl object; if \code{NULL}, a data frame; and if a filename, an Xdf data source referencing a file saved to that location.
}
\description{
Select distinct/unique rows
}
\details{
This verb calls \code{dplyr::distinct} on each chunk in an Xdf file. The individual data frames are \code{rbind}ed together and \code{dplyr::distinct} is called on the overall result. This may be slow if there are many chunks in the file; and the operation will be limited by memory if the number of distinct rows is large.

This verb can be used on HDFS data in the local compute context (on the edge node), but not in the Hadoop or Spark compute contexts.
}
\examples{
mtx <- as_xdf(mtcars, overwrite=TRUE)
tbl1 <- distinct(mtx)
tbl2 <- distinct(mtx, am)
tbl3 <- distinct(mtx, am, vs)
nrow(tbl1)
nrow(tbl2)
nrow(tbl3)

# save to a persistent Xdf file
distinct(mtx, am, vs, .outFile="mtcars_distinct.xdf")
}
\seealso{
\code{\link[dplyr]{distinct}} in package dplyr
}
