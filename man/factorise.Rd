% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/factorise.R, R/factorise_df.R,
%   R/zzz_non_xdf_srcs.R
\name{factorise}
\alias{factorise}
\alias{factorize}
\alias{factorise.RxXdfData}
\alias{factorise.RxFileData}
\alias{all_character}
\alias{all_integer}
\alias{all_numeric}
\alias{factorise.data.frame}
\alias{factorise.RxDataSource}
\title{Convert columns in an Xdf file to factor}
\usage{
factorise(.data, ...)

factorize(.data, ...)

\method{factorise}{RxXdfData}(.data, ..., .outFile = tbl_xdf(.data), .rxArgs)

\method{factorise}{RxFileData}(.data, ..., .outFile = tbl_xdf(.data), .rxArgs)

all_character(vars = .varTypes)

all_integer(vars = .varTypes)

all_numeric(vars = .varTypes)

\method{factorise}{data.frame}(.data, ...)

\method{factorise}{RxDataSource}(.data, ...)
}
\arguments{
\item{.data}{A data source.}

\item{...}{Variables to convert to factors.}

\item{.outFile}{Output format for the returned data. If not supplied, create an xdf tbl; if \code{NULL}, return a data frame; if a character string naming a file, save an Xdf file at that location.}

\item{.rxArgs}{A list of RevoScaleR arguments. See \code{\link{rxArgs}} for details.}
}
\value{
An object representing the returned data. This depends on the \code{.outFile} argument: if missing, it will be an xdf tbl object; if \code{NULL}, a data frame; and if a filename, an Xdf data source referencing a file saved to that location.
}
\description{
Convert columns in an Xdf file to factor
}
\details{
The selector functions listed in \code{\link[dplyr]{select}} also work with \code{factorise}. In addition, you can use the following:
\itemize{
 \item \code{all_character()}: selects all character variables
 \item \code{all_integer()}: selects all integer variables, ie those of type \code{"logical"} and \code{"integer"}
 \item \code{all_numeric()}: selects all numeric variables, ie those of type \code{"numeric"}, \code{"Date"}, \code{"POSIXct"}, \code{"logical"} and \code{"integer"}
}
If no variables are specified, all character variables will be converted to factors.

You can specify the levels for a variable by specifying them as the value of the argument. For example, \code{factorise(*, x = c("a","b","c"))} will turn the variable \code{x} into a factor with three levels \code{a}, \code{b} and \code{c}. Any values that don't match the set of levels will be turned into NAs. In particular, this means you should include the existing levels for variables that are already factors.

For performance reasons, factors created by \code{factorise} are not sorted; instead, the ordering of their levels will be determined by the order in which they are encountered in the data.

The method for \code{RxXdfData} objects is a shell around \code{\link[RevoScaleR]{rxFactors}}, which is the standard RevoScaleR function for factor manipulation. For \code{RxFileData} objects, the method calls \code{\link[RevoScaleR]{rxImport}} with an appropriately constructed \code{colInfo} argument.

The data frame method simply calls \code{factor} to convert the specified columns into factors.
}
\examples{
mtx <- as_xdf(mtcars, overwrite=TRUE)
tbl1 <- factorise(mtx, am, vs)
tbl_types(tbl1)

tbl2 <- factorise(mtx, all_numeric())
tbl_types(tbl2)

# selector functions used by select(), rename() also work
tbl3 <- factorise(mtx, starts_with("m"))
tbl_types(tbl3)

# save to a persistent Xdf file
factorise(mtx, am, vs, .outFile="mtcars_factor.xdf")

# factorise() also works with data frames
tbl4 <- factorise(mtcars, cyl)
tbl_types(tbl4)
}
\seealso{
\code{\link[RevoScaleR]{rxFactors}}, \code{\link[RevoScaleR]{rxImport}}, \code{\link{factor}}

\code{\link{chol}}, \code{\link{qr}}, \code{\link{svd}} for the other meaning of factorise
}
